import numpy as np
import pandas as pd
import matplotlib as plt
import seaborn as sns
%matplotlib notebook



dataset=pd.read_csv('C:\\Users\\HP\\Desktop\\VIT\\WIN SEM\\Data Mining\\Project\\Google-Playstore.csv')


dataset.head()


dataset.info()

X=dataset.iloc[:6000,[2,4,5,6,7,8,9,11,12,13,16,17,18,20,21,22,3]]







X['Released'] = pd.to_datetime(X['Released'])
X['Last Updated'] = pd.to_datetime(X['Last Updated'])
X

X.info()




z=list(X["Category"])
z1=set(z)
print(z1,len(z1))
lz=list(z1)
lz1=[x+1 for x in range(len(lz))]
print(lz1)
lz2=[]
for i in range(len(z)):
    for j in range(len(lz)):
        if(z[i]==lz[j]):
            z[i]=lz1[j]
print(z)
X["Category"]=z


X=X[~X['Size'].str.contains('Varies with device')]
X

X

ll=list(X['Size'])
for i in range(len(ll)):
    ll[i]=ll[i][0:len(ll[i])-1]
for i in range(len(ll)):
    if(ll[i][1]==","):
        print((ll[i]))
        ll[i]=ll[i][:1]+ll[i][2:]
        print((ll[i]))
    

ll=[float(i) for i in ll]
print(type(ll))

X['Size']=ll

X

ll1=list(X['Installs'])
for i in range(len(ll1)):
    ll1[i]=str(ll1[i])
    ll1[i]=ll1[i][:len(ll1[i])-1]
    if(ll1[i].find(',')!=-1):
        li=ll1[i].split(',')
        s=''
        for j in li:
            s=s+j
            
        ll1[i]=float(s)
    

           
X['Installs']=ll1
X

ll2=list(X['Ad Supported'])
for i in range(len(ll2)):
    if(ll2[i]==False):
        ll2[i]=0
    else:
        ll2[i]=1
X['Ad Supported']=ll2

ll3=list(X['In App Purchases'])
for i in range(len(ll3)):
    if(ll3[i]==False):
        ll3[i]=0
    else:
        ll3[i]=1
X['In App Purchases']=ll3

ll3=list(X['Editors Choice'])
for i in range(len(ll3)):
    if(ll3[i]==False):
        ll3[i]=0
    else:
        ll3[i]=1
X['Editors Choice']=ll3

ll3=list(X['Free'])
for i in range(len(ll3)):
    if(ll3[i]==False):
        ll3[i]=0
    else:
        ll3[i]=1
X['Free']=ll3

X.info()

X


details = pd.DataFrame(X)
  
# sort Dataframe rows based on "Name' 
# column in Descending Order
rslt_df = details.sort_values(by = ['Last Updated','Released'], ascending = False)
  
# show the resultant Dataframe****************************
rslt_df

Y=rslt_df
ll3=list(Y['Released'])
for i in range(len(ll3)):
        ll3[i]=i+1
Y['Released']=ll3

ll3=list(Y['Last Updated'])
for i in range(len(ll3)):
        ll3[i]=i+1
Y['Last Updated']=ll3
#*****************************************
Y

Y.info()

s=set(list(Y['Content Rating']))
print(s)
l=list(Y['Content Rating'])
for i in range(len(l)):
   if(l[i]=="Everyone"):
       l[i]=1
   elif(l[i]=="Everyone 10+"):
       l[i]=2
   elif(l[i]=="Teen"):
       l[i]=3
   elif(l[i]=="Mature 17+"):
       l[i]=4
   elif(l[i]=="Adults only 18+"):
       l[i]=5
   elif(l[i]=='Unrated'):
       l[i]=6
Y['Content Rating']=l
Y

ll1=list(Y['Installs'])
for i in range(len(ll1)):   
    if(ll1[i]!='' and ll1[i]!='na'):
        
        ll1[i]=float(ll1[i])*100
    else: 
        ll1[i]=-1
s=set(list(Y['Installs']))
s1=set(ll1)
Y['Installs']=ll1
Y

Y.info()

Y=Y.iloc[:,[0,1,2,3,4,5,6,7,10,11,12,13,14,15,16]]

Y.info()

#test=Y.loc[Y['Rating']==NaN]
Y.loc[Y['Rating'].isnull(),'value_is_NaN']='Yes'
Y.loc[Y['Rating'].notnull(), 'value_is_NaN'] = 'No'
#test=pd.isnull(Y['Rating'])
s=set(Y['Rating'])
s1=set(Y['value_is_NaN'])
Y =Y[~Y.isin([np.nan, np.inf, -np.inf])]
Y

test=Y.iloc[5001:,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]]
test =test[~test.isin([np.nan, np.inf, -np.inf])]
train=Y.iloc[:5000,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]]
train =train[~train.isin([np.nan, np.inf, -np.inf])]
test["Rating"]=-1




train.info()
train

import networkx as nx
import matplotlib.pyplot as plt

G=nx.Graph()
c0=list(train['Category'])
c1=list(train['Installs'])
c2=list(train['Minimum Installs'])
c3=list(train['Maximum Installs'])
c4=list(train['Free'])
c5=list(train['Price'])
c6=list(train['Size'])
c7=list(train['Released'])
c8=list(train['Last Updated'])
c9=list(train['Content Rating'])
c10=list(train['Ad Supported'])
c11=list(train['In App Purchases'])
c12=list(train['Editors Choice'])
c13=list(train['Rating'])
c14=list(train['Rating Count'])
#*****************************************

u0=list(test['Category'])
u1=list(test['Installs'])
u2=list(test['Minimum Installs'])
u3=list(test['Maximum Installs'])
u4=list(test['Free'])
u5=list(test['Price'])
u6=list(test['Size'])
u7=list(test['Released'])
u8=list(test['Last Updated'])
u9=list(test['Content Rating'])
u10=list(test['Ad Supported'])
u11=list(test['In App Purchases'])
u12=list(test['Editors Choice'])
u13=list(test['Rating'])
u14=list(test['Rating Count'])
#print(u1,u2,u3,u4,u5,u6,u7,u8,u9,u10,u11,u12,u13)

'''t1=-1.000000e+02
t2=0
t3=59681
t4=59681
t5=0
t6=0.0
t7=51.0
t8=254
t9=1
t10=1
t11=0
t12=0'''

d100=[]
for j in range(len(u13)):
     
    if(u1[j]==-1.0):
        u1[j]=0.0
        u2[j]=0.0
    d1=[]
    m=0
    for i in range(len(c13)):
        d=((c0[i]-u0[j])*2+(c1[i]-u1[j])2+(c2[i]-u2[j])2+(c3[i]-u3[j])2+(c4[i]-u4[j])2+(c5[i]-u5[j])2+(c6[i]-u6[j])2+(c7[i]-u7[j])2+(c8[i]-u8[j])2+(c9[i]-u9[j])2+(c14[i]-u14[j])2+(c10[i]-u10[j])2+(c11[i]-u11[j])2+(c12[i]-u12[j])2)*(1/2)
        d1.append(d)
    #d1 = [x for x in d1 if str(x) == 'nan']
    for i in range(len(d1)):
        if str(d1[i])=='nan':
            d1[i]=999999999999999
        else:
            d1[i]=d1[i]
    print(d1)
    m=set(list(d1))
    print(m)
   
    mi=list(m)
    #m.remove(np.nan)
    mi.sort()
    print(mi)
    dist=[]
    for i in range(len(d1)):
        if(d1[i]<=mi[0]+100):
            dist.append(i)
    r=0
    print(dist)
    for i in dist:
        #print(i,c13[i])
        r+=c13[i]
        #print(c13[i])
    r=r/len(dist)
    G.add_node((round(r,1)))
    d100.append(round(r,1))
    
    for i in dist:
        G.add_node(str(c13[i])+"t")
        G.add_edge(round(r,1),str(c13[i])+"t")
        #print(r,c13[i])
    
    
#train.iloc[255:1555,:]
test["Rating"]=d100
#print(test["Rating"])

test


train


nx.draw(G,with_labels=1)
plt.show()

tp = 0
tn = 0
fp = 0
fn = 0

for t,p in zip(train, test):
   if t == p:
       if p == 1:
           tp += 1
       else:
           tn += 1
   else:
       if p == 1:
           fn += 1
       else:
           fp += 1

accuracy = (tp + tn) / (tp + tn + fp + fn)
#precision = tp / (tp + fp)
print(accuracy)

Y =Y[~Y.isin([np.nan, np.inf, -np.inf]).any(1)]

Y=Y.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]]
Y


h = Y.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]].values
k = Y.iloc[:, 14].values
h



from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(h, k, test_size=0.20)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)
y_train



from sklearn import preprocessing
from sklearn import utils

lab_enc = preprocessing.LabelEncoder()
encoded = lab_enc.fit_transform(y_train)


print(utils.multiclass.type_of_target(y_train))

print(utils.multiclass.type_of_target(y_train.astype('int')))


print(utils.multiclass.type_of_target(y_train))


from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(X_train,encoded)


y_pred = classifier.predict(X_test)

encoded_y = lab_enc.fit_transform(y_test)

len(encoded)

from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(encoded_y, y_pred))
print(classification_report(encoded_y, y_pred))

error = []

# Calculating error for K values between 1 and 40
for i in range(1, 40):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train, encoded)
    pred_i = knn.predict(X_test)
    error.append(np.mean(pred_i != encoded_y))

error

from matplotlib import *
import sys
from pylab import *
plt.figure(figsize=(12, 6))
plt.plot(range(1, 40), error, color='red', linestyle='dashed', marker='o',
         markerfacecolor='blue', markersize=10)
plt.title('Error Rate K Value')
plt.xlabel('K Value')
plt.ylabel('Mean Error')

tp = 0
tn = 0
fp = 0
fn = 0

for t,p in zip(encoded_y, y_pred):
   if t == p:
       if p == 1:
           tp += 1
       else:
           tn += 1
   else:
       if p == 1:
           fn += 1
       else:
           fp += 1

accuracy = (tp + tn) / (tp + tn + fp + fn)
#precision = tp / (tp + fp)
print(accuracy)

from sklearn import metrics
# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(encoded_y, y_pred))

nx.draw(G,with_labels=1)
plt.show()
